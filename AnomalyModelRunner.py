import numpy as np
import pandas as pd
from tqdm import tqdm_notebook as tqdm
from AnomalyModelABS import AnomalyModel
from AnomalyGenerator import AnomalyGenerator
import matplotlib.pyplot as plt


def run_model_on_generator(model_class: AnomalyModel, generator: AnomalyGenerator, alpha: float = 0.95, **model_kwargs):
    """Run model_class on data, generated by generator
    :param model_class: anomaly model
    :param generator: generator of data
    :param alpha: minimum probability for anomaly
    :param model_kwargs: init parameters for anomaly model
    :return: probabilities and array of points with anomalies
    """
    model = model_class(**model_kwargs)
    pvals = []
    for point in tqdm(generator.get_new_data(), total=generator.get_size()):
        point.fillna(0, inplace=True)
        pvals.append(model.predict_anomaly_proba(point))
    pvals = np.array(pvals)
    return pvals, np.where(pvals > alpha)[0]


def show_model_results(column_name: str, model_name: str, generator: AnomalyGenerator, pvalues, alpha: float = 0.95):
    """Visualize results after run_model_on_generator
    :param column_name: column to show
    :param model_name: model name, str
    :param generator: generator of data
    :param pvalues: pvalue of anomaly
    :param alpha: minimum pvalue for anomaly
    :return: plot anomaly dots on graphics and show probabilities
    """
    generator.show_data(column_name, predicted_anomaly_points=np.where(pvalues > alpha)[0])
    plt.show()
    plt.figure(figsize=(20, 10))
    time_values = generator.get_time_values()
    plt.title(f"Predicted p-values for {model_name} model", fontsize=15)
    plt.plot(time_values, pvalues, lw=2, color="black")
    plt.plot(time_values, [alpha] * pvalues.shape[0], color='red', label = f"min p-value = {alpha}")
    plt.legend(fontsize=15)
    plt.ylabel(f"p-values", fontsize=15)
    plt.xlabel("Time", fontsize=15)
    plt.show()
